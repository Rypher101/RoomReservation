@using Newtonsoft.Json

@{
    ViewData["Title"] = "Survey";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<script>
    window.onload = function () {
    var obj = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Sur) as string);
  var charts = [];
  var toolTip = {
    shared: true
  },
  legend = {
    cursor: "pointer",
    itemclick: function (e) {
      if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
        e.dataSeries.visible = false;
      } else {
        e.dataSeries.visible = true;
      }
      e.chart.render();
    }
  };

  var systemDps = [], foodDps=[], buffersDps = [], inboundDps = [], readDps = [];

  var cpuChartOptions = {
    animationEnabled: true,
    theme: "light2", // "light1", "light2", "dark1", "dark2"
    title:{
      text: "Room"
    },
    toolTip: toolTip,
    axisY: {
        valueFormatString: "#",
        includeZero: true,
        minimum: 0,
        maximum: 6
    },
    legend: legend,
    data: [{
        type: "area",
      showInLegend: "true",
      name: "Room Qulity",
      yValueFormatString: "#",
      color: "#2196f3",
      legendMarkerType: "square",
      dataPoints: systemDps
    }]
  };
  var memoryChartOptions = {
    animationEnabled: true,
    theme: "light2",
    title:{
      text: "Room Service"
    },
      axisY: {
          valueFormatString: "#",
          includeZero: true,
          minimum: 0,
          maximum: 6
      },
    toolTip: toolTip,
    legend: legend,
    data: [{
        type: "area",
      showInLegend: "true",
      name: "Room Service Qulity",
      color: "#f44336",
      legendMarkerType: "square",
      dataPoints: buffersDps
    }]
  }
  var networkChartOptions = {
    animationEnabled: true,
    theme: "light2",
    title:{
        text: "Overall Service"
    },
      axisY: {
          valueFormatString: "#",
          includeZero: true,
          minimum: 0,
          maximum: 6
      },
    toolTip: toolTip,
    legend: legend,
    data: [{
        type: "area",
      showInLegend: "true",
      name: "Overall Service Qulity",
      color: "#388e3c",
      legendMarkerType: "square",
      dataPoints: inboundDps
    }]
  }
  var diskChartOptions = {
    animationEnabled: true,
    theme: "light2",
    title:{
      text: "Price"
    },
      axisY: {
          valueFormatString: "#",
          includeZero: true,
          minimum: 0,
          maximum: 6
      },
    toolTip: toolTip,
    legend: legend,
    data: [{
        type: "area",
      showInLegend: "true",
      name: "Price Satisfaction",
      color: "#f57c00",
      legendMarkerType: "square",
      dataPoints: readDps
    }]
        }

        var foodChartOptions = {
            animationEnabled: true,
            theme: "light2",
            title: {
                text: "Food"
            },
            axisY: {
                valueFormatString: "#",
                includeZero: true,
                minimum: 0,
                maximum: 6
            },
            toolTip: toolTip,
            legend: legend,
            data: [{
                type: "area",
                showInLegend: "true",
                name: "Food Qulity",
                color: "#f57c00",
                legendMarkerType: "square",
                dataPoints: foodDps
            }]
        }

  charts.push(new CanvasJS.Chart("chartContainer1", cpuChartOptions));
  charts.push(new CanvasJS.Chart("chartContainer2", memoryChartOptions));
  charts.push(new CanvasJS.Chart("chartContainer3", networkChartOptions));
        charts.push(new CanvasJS.Chart("chartContainer4", diskChartOptions));
        charts.push(new CanvasJS.Chart("chartContainer5", foodChartOptions));

        for (var i = 0; i < obj.length; i++) {
            systemDps.push({ y: parseInt(obj[i].SurRoom), label: parseInt(obj[i].ResId) });
            buffersDps.push({ y: parseInt(obj[i].SurRoomService), label: parseInt(obj[i].ResId) });
            inboundDps.push({ y: parseInt(obj[i].SurService), label: parseInt(obj[i].ResId) });
            readDps.push({ y: parseInt(obj[i].SurPrice), label: parseInt(obj[i].ResId) });
            foodDps.push({ y: parseInt(obj[i].SurFood), label: parseInt(obj[i].ResId) });
    }
    for( var i = 0; i < charts.length; i++){
      charts[i].options.axisX = {
        labelAngle: 0,
        crosshair: {
          enabled: true,
          snapToDataPoint: true,
          valueFormatString: "HH:mm"
        }
      }
    }

    syncCharts(charts, true, true, true); // syncCharts(charts, syncToolTip, syncCrosshair, syncAxisXRange)

    for( var i = 0; i < charts.length; i++){
      charts[i].render();
    }


  function syncCharts(charts, syncToolTip, syncCrosshair, syncAxisXRange) {

    if(!this.onToolTipUpdated){
      this.onToolTipUpdated = function(e) {
        for (var j = 0; j < charts.length; j++) {
          if (charts[j] != e.chart)
            charts[j].toolTip.showAtX(e.entries[0].xValue);
        }
      }
    }

    if(!this.onToolTipHidden){
      this.onToolTipHidden = function(e) {
        for( var j = 0; j < charts.length; j++){
          if(charts[j] != e.chart)
            charts[j].toolTip.hide();
        }
      }
    }

    if(!this.onCrosshairUpdated){
      this.onCrosshairUpdated = function(e) {
        for(var j = 0; j < charts.length; j++){
          if(charts[j] != e.chart)
            charts[j].axisX[0].crosshair.showAt(e.value);
        }
      }
    }

    if(!this.onCrosshairHidden){
      this.onCrosshairHidden =  function(e) {
        for( var j = 0; j < charts.length; j++){
          if(charts[j] != e.chart)
            charts[j].axisX[0].crosshair.hide();
        }
      }
    }

    if(!this.onRangeChanged){
      this.onRangeChanged = function(e) {
        for (var j = 0; j < charts.length; j++) {
          if (e.trigger === "reset") {
            charts[j].options.axisX.viewportMinimum = charts[j].options.axisX.viewportMaximum = null;
            charts[j].options.axisY.viewportMinimum = charts[j].options.axisY.viewportMaximum = null;
            charts[j].render();
          } else if (charts[j] !== e.chart) {
            charts[j].options.axisX.viewportMinimum = e.axisX[0].viewportMinimum;
            charts[j].options.axisX.viewportMaximum = e.axisX[0].viewportMaximum;
            charts[j].render();
          }
        }
      }
    }

    for(var i = 0; i < charts.length; i++) {

      //Sync ToolTip
      if(syncToolTip) {
        if(!charts[i].options.toolTip)
          charts[i].options.toolTip = {};

        charts[i].options.toolTip.updated = this.onToolTipUpdated;
        charts[i].options.toolTip.hidden = this.onToolTipHidden;
      }

      //Sync Crosshair
      if(syncCrosshair) {
        if(!charts[i].options.axisX)
          charts[i].options.axisX = { crosshair: { enabled: true }};

        charts[i].options.axisX.crosshair.updated = this.onCrosshairUpdated;
        charts[i].options.axisX.crosshair.hidden = this.onCrosshairHidden;
      }

      //Sync Zoom / Pan
      if(syncAxisXRange) {
        charts[i].options.zoomEnabled = true;
        charts[i].options.rangeChanged = this.onRangeChanged;
      }
    }
  }

}
</script>

<style>
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .col {
        float: left;
        width: 50%;
        height: 270px;
    }
</style>
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header ">
                        <h4 class="card-title">Survey Analyze</h4>
                    </div>
                    <div class="card-body ">
                        <div class="row">
                            <div class="col" id="chartContainer1"></div>
                            <div class="col" id="chartContainer2"></div>
                        </div>
                        <div class="row">
                            <div class="col" id="chartContainer3"></div>
                            <div class="col" id="chartContainer4"></div>
                        </div>
                        <div class="row">
                            <div class="col" id="chartContainer5"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

